
kernel MAP : ImageComputationKernel<ePixelWise>
{

  Image<eRead, eAccessPoint, eEdgeClamped> src_benergy; // the input background energy 
  Image<eRead, eAccessPoint, eEdgeClamped> alpha; // the referenced image


  Image<eWrite> dst_alpha; // the output alpha


  void process(int2 pos) {

    SampleType(dst_alpha) sample(0.0f);
    SampleType(src_benergy) input = src_benergy();
    SampleType(alpha) ref_input = alpha();

    // Calculate background energy E_1_0
    int x = pos.x;
    int y = pos.y;

    int zeroCount = 0;
    int oneCount = 0;

    for(int i = -1; i < 2; i++)
    {
        for(int j = -1; < 2; j++)
        {
            // Dont consider current pixel, only neighborhood
            if(x + j == 0 && y + i == 0)
            {
                continue;
            }

        }
    }

    // Calculate 3x3 neighborhood of pixels that say what we should be. Use matte as prior


    // Set E_t = 60

    // Calculate E_s0 Spatial energy alpha = 0

    // Calculate E_s1 Spatial energy alpha = 1

    // E0 = E_1_0 + E_s0

    // E1 = E_1_1 + E_s1

    // If E0 < E1, output 0
    // If E1 < E0, outout 1

    // Write the result to the output image
    dst_alpha() = float4(1.0f,0.0f,1.0f,1.0f);
  }
};
